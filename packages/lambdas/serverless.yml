service: lambdas

useDotenv: true

# Create an optimized package for our functions
package:
  individually: true

plugins:
  - serverless-bundle
  - serverless-offline
  - serverless-step-functions
  - serverless-localstack

provider:
  name: aws
  runtime: nodejs12.x
  stage: dev
  region: us-west-2
  apiGateway:
    shouldStartNameWithService: true
  lambdaHashingVersion: 20201221
  environment:
    BUCKET_TABLE: ${env:BUCKET_TABLE}
    OPEN_WEATHER_API_KEY: ${env:OPEN_WEATHER_API_KEY}
    UBNT_URL: ${env:UBNT_URL}
    UBNT_USERNAME: ${env:UBNT_USERNAME}
    UBNT_PASSWORD: ${env:UBNT_PASSWORD}
    UBNT_SOCKET: ${env:UBNT_SOCKET}

custom:
  localstack:
    stages:
      - local
    host: http://localhost
    edgePort: 4566

functions:
  echo:
    handler: src/echoHandler.default
    events:
      - http: GET /echo

  bucket:
    handler: src/bucketHandler.default
    events:
      - http: POST /bucket

  ubntSessionId:
    handler: src/ubntSessionIdHandler.default
    events:
      - http: GET /ubntSessionId

  ubntStatistics:
    handler: src/ubntStatisticsHandler.default
    events:
      - http: GET /ubntStatistics

  fetchWeather:
    handler: src/fetchWeather.default
    events:
      - http: GET /fetchWeather

  deleteStaleEntries:
    handler: src/deleteStaleEntries.default
    timeout: 90
    events:
      - http: POST /deleteStale

  streamStatistics:
    handler: src/streamStatisticsHandler.default
    timeout: 90
    events:
      - http: POST /streamStatistics

stepFunctions:
  stateMachines:
    # ubntInterfaces:
    #   events:
    #     - schedule: rate(1 minute)
    #   definition:
    #     StartAt: StreamInterfaces
    #     States:
    #       StreamInterfaces:
    #         Type: Task
    #         Resource:
    #           Fn::GetAtt: [streamStatistics, Arn]
    #         Parameters:
    #           bucketArn:
    #             Fn::GetAtt: [bucket, Arn]
    #           topic: interfaces
    #           timeout: 60
    #         End: true
    fetchWeather:
      events:
        - schedule: cron(0 * * * ? *)
      definition:
        StartAt: FetchWeather
        States:
          FetchWeather:
            Type: Task
            Resource:
              Fn::GetAtt: [fetchWeather, Arn]
            Parameters:
              bucketArn:
                Fn::GetAtt: [bucket, Arn]
              zipCode: "80526"
            End: true
    dbCleanup:
      events:
        - schedule: rate(5 minutes)
      definition:
        StartAt: PruneUbntInterfaces
        States:
          PruneUbntInterfaces:
            Type: Task
            Resource:
              Fn::GetAtt: [deleteStaleEntries, Arn]
            Parameters:
              key: ubnt-interfaces
              expires: 300
            End: true

  #   recordUbntSystem:
  #     events:
  #       - schedule: rate(5 minutes)
  #     definition:
  #       StartAt: GetSessionId
  #       States:
  #         GetSessionId:
  #           Type: Task
  #           Resource:
  #             Fn::GetAtt: [ubntSessionId, Arn]
  #           Parameters:
  #             body: '{"topics": "system-stats", "key": "ubnt-system"}'
  #           Next: FetchStatistics
  #         FetchStatistics:
  #           Type: Task
  #           Resource:
  #             Fn::GetAtt: [ubntStatistics, Arn]
  #           Next: Report
  #         Report:
  #           Type: Task
  #           Resource:
  #             Fn::GetAtt: [bucket, Arn]
  #           End: true
  #   recordUbntInterfaces:
  #     events:
  #       - schedule: rate(1 minute)
  #     definition:
  #       StartAt: GetSessionId
  #       States:
  #         GetSessionId:
  #           Type: Task
  #           Resource:
  #             Fn::GetAtt: [ubntSessionId, Arn]
  #           Parameters:
  #             body: '{"topics": "interfaces", "key": "ubnt-interfaces"}'
  #           Next: FetchStatistics
  #         FetchStatistics:
  #           Type: Task
  #           Resource:
  #             Fn::GetAtt: [ubntStatistics, Arn]
  #           Next: Report
  #         Report:
  #           Type: Task
  #           Resource:
  #             Fn::GetAtt: [bucket, Arn]
  #           End: true
  validate: true

resources:
  Resources:
    CandidatesDynamoDbTable:
      Type: "AWS::DynamoDB::Table"
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          - AttributeName: "key"
            AttributeType: "S"
          - AttributeName: "timestamp"
            AttributeType: "N"
        KeySchema:
          - AttributeName: "key"
            KeyType: "HASH"
          - AttributeName: "timestamp"
            KeyType: "RANGE"
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        StreamSpecification:
          StreamViewType: "NEW_AND_OLD_IMAGES"
        TableName: ${self:provider.environment.BUCKET_TABLE}
